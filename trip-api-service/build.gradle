plugins {
    id 'java'

}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

configurations {
    wsimportClasspath {
        canBeResolved = true
        canBeConsumed = false
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.tripsharing.api.TripApiServiceApplication'
        )
    }
}


dependencies {


    implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:3.1.3'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:3.1.3'
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:3.1.3'
    implementation 'org.glassfish.jersey.ext:jersey-bean-validation:3.1.3'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.1'

    implementation 'org.glassfish.jersey.ext:jersey-bean-validation:3.1.3'

    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.4'
    implementation 'com.sun.xml.ws:jaxws-ri:4.0.3'

    wsimportClasspath 'com.sun.xml.ws:jaxws-tools:4.0.3'

    implementation project(':common-module')

    implementation 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

}

tasks.register('wsimport', Exec) {
    def outputDir = "$buildDir/generated-sources/wsimport"
    def classOutputDir = "$buildDir/classes/wsimport"
    def packageName = "com.client.generated"
    def wsdlUrl = "http://localhost:8082/ws/trip?wsdl"

    doFirst {
        println "Creating output folders:"
        println "  Sources: $outputDir"
        println "  Classes: $classOutputDir"
        file(outputDir).mkdirs()
        file(classOutputDir).mkdirs() // âœ… this line is critical
    }

    commandLine 'java',
            '-cp', configurations.wsimportClasspath.asPath,
            'com.sun.tools.ws.WsImport',
            '-s', outputDir,
            '-d', classOutputDir,
            '-p', packageName,
            wsdlUrl
}


sourceSets {
    main {
        java {
            srcDir "$buildDir/generated-sources/wsimport"
        }
    }
}

test {
    useJUnitPlatform()
}
